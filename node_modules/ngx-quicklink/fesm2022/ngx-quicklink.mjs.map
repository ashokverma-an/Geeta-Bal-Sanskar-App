{"version":3,"file":"ngx-quicklink.mjs","sources":["../../../projects/ngx-quicklink/src/lib/prefetch-registry.service.ts","../../../projects/ngx-quicklink/src/lib/link-handler.service.ts","../../../projects/ngx-quicklink/src/lib/link.directive.ts","../../../projects/ngx-quicklink/src/lib/utils/find-path.ts","../../../projects/ngx-quicklink/src/lib/quicklink-strategy.service.ts","../../../projects/ngx-quicklink/src/lib/quicklink.module.ts","../../../projects/ngx-quicklink/src/public-api.ts","../../../projects/ngx-quicklink/src/ngx-quicklink.ts"],"sourcesContent":["import {\n  Router,\n  UrlTree,\n  Params,\n  UrlSegmentGroup,\n  UrlSegment,\n  PRIMARY_OUTLET\n} from '@angular/router';\nimport { Injectable } from '@angular/core';\n\n// Using a global registry so we can keep it populated across lazy-loaded\n// modules with different parent injectors which create instance of the registry.\nconst globalRegistry: UrlTree[] = [];\n\n@Injectable({ providedIn: 'root' })\nexport class PrefetchRegistry {\n  private trees: UrlTree[] = globalRegistry;\n  constructor(private router: Router) {}\n\n  add(tree: UrlTree) {\n    this.trees.push(tree);\n  }\n\n  shouldPrefetch(url: string) {\n    const tree = this.router.parseUrl(url);\n    return this.trees.some(containsTree.bind(null, tree));\n  }\n}\n\nfunction containsQueryParams(container: Params, containee: Params): boolean {\n  // TODO: This does not handle array params correctly.\n  return (\n    Object.keys(containee).length <= Object.keys(container).length &&\n    Object.keys(containee).every(key => containee[key] === container[key])\n  );\n}\n\nexport function containsTree(containee: UrlTree, container: UrlTree): boolean {\n  return (\n    containsQueryParams(container.queryParams, containee.queryParams) &&\n    containsSegmentGroup(container.root, containee.root, containee.root.segments)\n  );\n}\n\nfunction containsSegmentGroup(\n  container: UrlSegmentGroup,\n  containee: UrlSegmentGroup,\n  containeePaths: UrlSegment[]\n): boolean {\n  if (container.segments.length > containeePaths.length) {\n    const current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    return true;\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    if (!containee.hasChildren()) return true;\n\n    for (const c in containee.children) {\n      if (!container.children[c]) break;\n      if (\n        containsSegmentGroup(\n          container.children[c],\n          containee.children[c],\n          containee.children[c].segments\n        )\n      )\n        return true;\n    }\n    return false;\n  } else {\n    const current = containeePaths.slice(0, container.segments.length);\n    const next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroup(container.children[PRIMARY_OUTLET], containee, next);\n  }\n}\n\nexport function equalPath(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  if (as.length !== bs.length) return false;\n  return as.every(\n    (a, i) => a.path === bs[i].path || a.path.startsWith(':') || bs[i].path.startsWith(':')\n  );\n}\n","import { Injectable, InjectionToken, NgZone } from '@angular/core';\nimport { LinkDirective } from './link.directive';\nimport { RouterPreloader } from '@angular/router';\nimport { LinkHandlerStrategy } from './link-handler-strategy';\nimport { PrefetchRegistry } from './prefetch-registry.service';\n\ntype RequestIdleCallbackHandle = any;\ntype RequestIdleCallbackOptions = {\n  timeout: number;\n};\ntype RequestIdleCallbackDeadline = {\n  readonly didTimeout: boolean;\n  timeRemaining: (() => number);\n};\n\ntype RequestIdleCallback = ((\n  callback: ((deadline: RequestIdleCallbackDeadline) => void),\n  opts?: RequestIdleCallbackOptions\n) => RequestIdleCallbackHandle);\n\nconst requestIdleCallback: RequestIdleCallback =\n  typeof window !== 'undefined'\n    ? (window as any).requestIdleCallback ||\n      function(cb: Function) {\n        const start = Date.now();\n        return setTimeout(function() {\n          cb({\n            didTimeout: false,\n            timeRemaining: function() {\n              return Math.max(0, 50 - (Date.now() - start));\n            }\n          });\n        }, 1);\n      }\n    : () => {};\n\nconst observerSupported = () =>\n  typeof window !== 'undefined' ? !!(window as any).IntersectionObserver : false;\n\nexport const LinkHandler = new InjectionToken('LinkHandler');\n\n@Injectable({ providedIn: 'root' })\nexport class ObservableLinkHandler implements LinkHandlerStrategy {\n  private elementLink = new Map<Element, LinkDirective>();\n  private observer: IntersectionObserver | null = observerSupported()\n    ? new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (!this.observer) {\n            return;\n          }\n          if (entry.isIntersecting) {\n            const link = entry.target as HTMLAnchorElement;\n\n            const routerLink = this.elementLink.get(link);\n            if ( !routerLink || !routerLink.urlTree ) return;\n\n            this.registry.add(routerLink.urlTree);\n            this.observer.unobserve(link);\n            requestIdleCallback(() => {\n              this.loader.preload().subscribe(() => void 0);\n            });\n          }\n        });\n      })\n    : null;\n\n  constructor(\n    private loader: RouterPreloader,\n    private registry: PrefetchRegistry,\n    private ngZone: NgZone,\n  ) {}\n\n  register(el: LinkDirective) {\n    this.elementLink.set(el.element, el);\n    this.ngZone.runOutsideAngular(() => {\n      if (!this.observer) {\n        return;\n      }\n      this.observer.observe(el.element);\n    });\n  }\n\n  // First call to unregister will not hit this.\n  unregister(el: LinkDirective) {\n    if (!this.observer) {\n      return;\n    }\n    if (this.elementLink.has(el.element)) {\n      this.observer.unobserve(el.element);\n      this.elementLink.delete(el.element);\n    }\n  }\n\n  supported() {\n    return observerSupported();\n  }\n\n}\n\n@Injectable({ providedIn: 'root' })\nexport class PreloadLinkHandler implements LinkHandlerStrategy {\n  constructor(\n    private loader: RouterPreloader,\n    private registry: PrefetchRegistry,\n  ) {}\n\n  register(el: LinkDirective) {\n    this.registry.add(el.urlTree);\n    requestIdleCallback(() => this.loader.preload().subscribe(() => void 0));\n  }\n\n  unregister(_: LinkDirective) {}\n\n  supported() {\n    return true;\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  Optional,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Input,\n  SimpleChanges\n} from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { LinkHandler } from './link-handler.service';\nimport { LinkHandlerStrategy } from './link-handler-strategy';\n\n@Directive({\n  selector: '[routerLink]',\n  standalone: true\n})\nexport class LinkDirective implements OnChanges, OnDestroy {\n  @Input() routerLink: Pick<RouterLink | RouterLink, 'routerLink'>['routerLink'];\n  private rl: RouterLink | RouterLink;\n  private linkHandler: LinkHandlerStrategy | undefined;\n\n  constructor(\n    @Inject(LinkHandler) private linkHandlers: LinkHandlerStrategy[],\n    private el: ElementRef,\n    @Optional() link: RouterLink,\n    @Optional() linkWithHref: RouterLink\n  ) {\n    this.linkHandler = this.linkHandlers.filter(h => h.supported()).shift();\n    this.rl = link || linkWithHref;\n    if (this.element && this.element.setAttribute) {\n      this.element.setAttribute('ngx-ql', '');\n    }\n  }\n\n  ngOnChanges(c: SimpleChanges) {\n    if (c['routerLink'] && this.linkHandler) {\n      this.linkHandler.unregister(this);\n      this.linkHandler.register(this);\n    }\n  }\n\n  ngOnDestroy() {\n    if (!this.linkHandler) {\n      return;\n    }\n    this.linkHandler.unregister(this);\n  }\n\n  get element(): Element {\n    return this.el.nativeElement;\n  }\n\n  get urlTree(): any {\n    return this.rl.urlTree;\n  }\n}\n","import { PRIMARY_OUTLET, Route } from '@angular/router';\n\nexport const findPath = (config: Route[], route: Route): string => {\n  config = config.slice();\n  const parent = new Map<Route, Route>();\n  const visited = new Set<Route>();\n  while (config.length) {\n    const el = config.shift();\n    if (!el) {\n      continue;\n    }\n    visited.add(el);\n    if (el === route) break;\n    let children = el.children || [];\n    const current = (el as any)._loadedRoutes || [];\n    for (const route of current) {\n      if (route && route.children) {\n        children = children.concat(route.children);\n      }\n    }\n    children.forEach((r: Route) => {\n      if (visited.has(r)) return;\n      parent.set(r, el);\n      config.push(r);\n    });\n  }\n  let path = '';\n  let current: Route | undefined = route;\n\n  while (current) {\n    if (isPrimaryRoute(current)) {\n      path = `/${current.path}${path}`;\n    } else {\n      path = `/(${current.outlet}:${current.path}${path})`;\n    }\n    current = parent.get(current);\n  }\n\n  // For routes with empty paths (the resulted string will look like `///section/sub-section`)\n  return path.replace(/[\\/]+/, '/');\n};\n\nfunction isPrimaryRoute(route: Route) {\n  return route.outlet === PRIMARY_OUTLET || !route.outlet;\n}\n","import { Injectable } from '@angular/core';\nimport { PreloadingStrategy, Router, Route } from '@angular/router';\nimport { PrefetchRegistry } from './prefetch-registry.service';\nimport { EMPTY } from 'rxjs';\nimport { findPath } from './utils/find-path';\n\n@Injectable({ providedIn: 'root' })\nexport class QuicklinkStrategy implements PreloadingStrategy {\n  loading = new Set<Route>();\n\n  constructor(private registry: PrefetchRegistry, private router: Router) {}\n\n  preload(route: Route, load: Function) {\n    if (this.loading.has(route)) {\n      // Don't preload the same route twice\n      return EMPTY;\n    }\n    const conn =\n      typeof navigator !== 'undefined'\n        ? (navigator as any).connection\n        : undefined;\n    if (conn) {\n      // Don't preload if the user is on 2G. or if Save-Data is enabled..\n      if ((conn.effectiveType || '').includes('2g') || conn.saveData)\n        return EMPTY;\n    }\n    // Prevent from preloading\n    if (route.data && route.data['preload'] === false) {\n      return EMPTY;\n    }\n    const fullPath = findPath(this.router.config, route);\n    if (this.registry.shouldPrefetch(fullPath)) {\n      this.loading.add(route);\n      return load();\n    }\n\n    return EMPTY;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  ObservableLinkHandler,\n  PreloadLinkHandler,\n  LinkHandler,\n} from './link-handler.service';\nimport { LinkDirective } from './link.directive';\nimport { PrefetchRegistry } from './prefetch-registry.service';\nimport { QuicklinkStrategy } from './quicklink-strategy.service';\n\nexport const quicklinkProviders = [\n  {\n    provide: LinkHandler,\n    useClass: ObservableLinkHandler,\n    multi: true,\n  },\n  {\n    provide: LinkHandler,\n    useClass: PreloadLinkHandler,\n    multi: true,\n  },\n  PrefetchRegistry,\n  QuicklinkStrategy,\n];\n\n@NgModule({\n  imports: [LinkDirective],\n  exports: [LinkDirective],\n  providers: quicklinkProviders,\n})\nexport class QuicklinkModule {}\n","/*\n * Public API Surface of ngx-quicklink\n */\n\nexport { quicklinkProviders } from './lib/quicklink.module';\nexport { QuicklinkModule } from './lib/quicklink.module';\nexport { LinkDirective as QuicklinkDirective } from './lib/link.directive';\nexport { QuicklinkStrategy } from './lib/quicklink-strategy.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i2.PrefetchRegistry","i1.PrefetchRegistry","i2"],"mappings":"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"}