import { Injectable } from '@angular/core';
import { EMPTY } from 'rxjs';
import { findPath } from './utils/find-path';
import * as i0 from "@angular/core";
import * as i1 from "./prefetch-registry.service";
import * as i2 from "@angular/router";
export class QuicklinkStrategy {
    constructor(registry, router) {
        this.registry = registry;
        this.router = router;
        this.loading = new Set();
    }
    preload(route, load) {
        if (this.loading.has(route)) {
            // Don't preload the same route twice
            return EMPTY;
        }
        const conn = typeof navigator !== 'undefined'
            ? navigator.connection
            : undefined;
        if (conn) {
            // Don't preload if the user is on 2G. or if Save-Data is enabled..
            if ((conn.effectiveType || '').includes('2g') || conn.saveData)
                return EMPTY;
        }
        // Prevent from preloading
        if (route.data && route.data['preload'] === false) {
            return EMPTY;
        }
        const fullPath = findPath(this.router.config, route);
        if (this.registry.shouldPrefetch(fullPath)) {
            this.loading.add(route);
            return load();
        }
        return EMPTY;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: QuicklinkStrategy, deps: [{ token: i1.PrefetchRegistry }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: QuicklinkStrategy, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: QuicklinkStrategy, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.PrefetchRegistry }, { type: i2.Router }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpY2tsaW5rLXN0cmF0ZWd5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcXVpY2tsaW5rL3NyYy9saWIvcXVpY2tsaW5rLXN0cmF0ZWd5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7OztBQUc3QyxNQUFNLE9BQU8saUJBQWlCO0lBRzVCLFlBQW9CLFFBQTBCLEVBQVUsTUFBYztRQUFsRCxhQUFRLEdBQVIsUUFBUSxDQUFrQjtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVE7UUFGdEUsWUFBTyxHQUFHLElBQUksR0FBRyxFQUFTLENBQUM7SUFFOEMsQ0FBQztJQUUxRSxPQUFPLENBQUMsS0FBWSxFQUFFLElBQWM7UUFDbEMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQzVCLHFDQUFxQztZQUNyQyxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7UUFDRCxNQUFNLElBQUksR0FDUixPQUFPLFNBQVMsS0FBSyxXQUFXO1lBQzlCLENBQUMsQ0FBRSxTQUFpQixDQUFDLFVBQVU7WUFDL0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNoQixJQUFJLElBQUksRUFBRSxDQUFDO1lBQ1QsbUVBQW1FO1lBQ25FLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUTtnQkFDNUQsT0FBTyxLQUFLLENBQUM7UUFDakIsQ0FBQztRQUNELDBCQUEwQjtRQUMxQixJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxLQUFLLEVBQUUsQ0FBQztZQUNsRCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7UUFDRCxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDckQsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3hCLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDaEIsQ0FBQztRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs4R0E5QlUsaUJBQWlCO2tIQUFqQixpQkFBaUIsY0FESixNQUFNOzsyRkFDbkIsaUJBQWlCO2tCQUQ3QixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByZWxvYWRpbmdTdHJhdGVneSwgUm91dGVyLCBSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBQcmVmZXRjaFJlZ2lzdHJ5IH0gZnJvbSAnLi9wcmVmZXRjaC1yZWdpc3RyeS5zZXJ2aWNlJztcbmltcG9ydCB7IEVNUFRZIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaW5kUGF0aCB9IGZyb20gJy4vdXRpbHMvZmluZC1wYXRoJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBRdWlja2xpbmtTdHJhdGVneSBpbXBsZW1lbnRzIFByZWxvYWRpbmdTdHJhdGVneSB7XG4gIGxvYWRpbmcgPSBuZXcgU2V0PFJvdXRlPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVnaXN0cnk6IFByZWZldGNoUmVnaXN0cnksIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIpIHt9XG5cbiAgcHJlbG9hZChyb3V0ZTogUm91dGUsIGxvYWQ6IEZ1bmN0aW9uKSB7XG4gICAgaWYgKHRoaXMubG9hZGluZy5oYXMocm91dGUpKSB7XG4gICAgICAvLyBEb24ndCBwcmVsb2FkIHRoZSBzYW1lIHJvdXRlIHR3aWNlXG4gICAgICByZXR1cm4gRU1QVFk7XG4gICAgfVxuICAgIGNvbnN0IGNvbm4gPVxuICAgICAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyAobmF2aWdhdG9yIGFzIGFueSkuY29ubmVjdGlvblxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICBpZiAoY29ubikge1xuICAgICAgLy8gRG9uJ3QgcHJlbG9hZCBpZiB0aGUgdXNlciBpcyBvbiAyRy4gb3IgaWYgU2F2ZS1EYXRhIGlzIGVuYWJsZWQuLlxuICAgICAgaWYgKChjb25uLmVmZmVjdGl2ZVR5cGUgfHwgJycpLmluY2x1ZGVzKCcyZycpIHx8IGNvbm4uc2F2ZURhdGEpXG4gICAgICAgIHJldHVybiBFTVBUWTtcbiAgICB9XG4gICAgLy8gUHJldmVudCBmcm9tIHByZWxvYWRpbmdcbiAgICBpZiAocm91dGUuZGF0YSAmJiByb3V0ZS5kYXRhWydwcmVsb2FkJ10gPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gRU1QVFk7XG4gICAgfVxuICAgIGNvbnN0IGZ1bGxQYXRoID0gZmluZFBhdGgodGhpcy5yb3V0ZXIuY29uZmlnLCByb3V0ZSk7XG4gICAgaWYgKHRoaXMucmVnaXN0cnkuc2hvdWxkUHJlZmV0Y2goZnVsbFBhdGgpKSB7XG4gICAgICB0aGlzLmxvYWRpbmcuYWRkKHJvdXRlKTtcbiAgICAgIHJldHVybiBsb2FkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIEVNUFRZO1xuICB9XG59XG4iXX0=