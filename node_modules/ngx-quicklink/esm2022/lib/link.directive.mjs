import { Directive, Optional, Inject, Input } from '@angular/core';
import { LinkHandler } from './link-handler.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
export class LinkDirective {
    constructor(linkHandlers, el, link, linkWithHref) {
        this.linkHandlers = linkHandlers;
        this.el = el;
        this.linkHandler = this.linkHandlers.filter(h => h.supported()).shift();
        this.rl = link || linkWithHref;
        if (this.element && this.element.setAttribute) {
            this.element.setAttribute('ngx-ql', '');
        }
    }
    ngOnChanges(c) {
        if (c['routerLink'] && this.linkHandler) {
            this.linkHandler.unregister(this);
            this.linkHandler.register(this);
        }
    }
    ngOnDestroy() {
        if (!this.linkHandler) {
            return;
        }
        this.linkHandler.unregister(this);
    }
    get element() {
        return this.el.nativeElement;
    }
    get urlTree() {
        return this.rl.urlTree;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: LinkDirective, deps: [{ token: LinkHandler }, { token: i0.ElementRef }, { token: i1.RouterLink, optional: true }, { token: i1.RouterLink, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.0", type: LinkDirective, isStandalone: true, selector: "[routerLink]", inputs: { routerLink: "routerLink" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: LinkDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[routerLink]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LinkHandler]
                }] }, { type: i0.ElementRef }, { type: i1.RouterLink, decorators: [{
                    type: Optional
                }] }, { type: i1.RouterLink, decorators: [{
                    type: Optional
                }] }], propDecorators: { routerLink: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcXVpY2tsaW5rL3NyYy9saWIvbGluay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxRQUFRLEVBQ1IsTUFBTSxFQUdOLEtBQUssRUFFTixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7OztBQU9yRCxNQUFNLE9BQU8sYUFBYTtJQUt4QixZQUMrQixZQUFtQyxFQUN4RCxFQUFjLEVBQ1YsSUFBZ0IsRUFDaEIsWUFBd0I7UUFIUCxpQkFBWSxHQUFaLFlBQVksQ0FBdUI7UUFDeEQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUl0QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDeEUsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLElBQUksWUFBWSxDQUFDO1FBQy9CLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQzlDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxQyxDQUFDO0lBQ0gsQ0FBQztJQUVELFdBQVcsQ0FBQyxDQUFnQjtRQUMxQixJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDeEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsQ0FBQztJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN0QixPQUFPO1FBQ1QsQ0FBQztRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDO0lBQ3pCLENBQUM7OEdBdENVLGFBQWEsa0JBTWQsV0FBVztrR0FOVixhQUFhOzsyRkFBYixhQUFhO2tCQUp6QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxjQUFjO29CQUN4QixVQUFVLEVBQUUsSUFBSTtpQkFDakI7OzBCQU9JLE1BQU07MkJBQUMsV0FBVzs7MEJBRWxCLFFBQVE7OzBCQUNSLFFBQVE7eUNBUkYsVUFBVTtzQkFBbEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgT3B0aW9uYWwsXG4gIEluamVjdCxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIElucHV0LFxuICBTaW1wbGVDaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyTGluayB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBMaW5rSGFuZGxlciB9IGZyb20gJy4vbGluay1oYW5kbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTGlua0hhbmRsZXJTdHJhdGVneSB9IGZyb20gJy4vbGluay1oYW5kbGVyLXN0cmF0ZWd5JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3JvdXRlckxpbmtdJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBMaW5rRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBASW5wdXQoKSByb3V0ZXJMaW5rOiBQaWNrPFJvdXRlckxpbmsgfCBSb3V0ZXJMaW5rLCAncm91dGVyTGluayc+Wydyb3V0ZXJMaW5rJ107XG4gIHByaXZhdGUgcmw6IFJvdXRlckxpbmsgfCBSb3V0ZXJMaW5rO1xuICBwcml2YXRlIGxpbmtIYW5kbGVyOiBMaW5rSGFuZGxlclN0cmF0ZWd5IHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoTGlua0hhbmRsZXIpIHByaXZhdGUgbGlua0hhbmRsZXJzOiBMaW5rSGFuZGxlclN0cmF0ZWd5W10sXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICBAT3B0aW9uYWwoKSBsaW5rOiBSb3V0ZXJMaW5rLFxuICAgIEBPcHRpb25hbCgpIGxpbmtXaXRoSHJlZjogUm91dGVyTGlua1xuICApIHtcbiAgICB0aGlzLmxpbmtIYW5kbGVyID0gdGhpcy5saW5rSGFuZGxlcnMuZmlsdGVyKGggPT4gaC5zdXBwb3J0ZWQoKSkuc2hpZnQoKTtcbiAgICB0aGlzLnJsID0gbGluayB8fCBsaW5rV2l0aEhyZWY7XG4gICAgaWYgKHRoaXMuZWxlbWVudCAmJiB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCduZ3gtcWwnLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkNoYW5nZXMoYzogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjWydyb3V0ZXJMaW5rJ10gJiYgdGhpcy5saW5rSGFuZGxlcikge1xuICAgICAgdGhpcy5saW5rSGFuZGxlci51bnJlZ2lzdGVyKHRoaXMpO1xuICAgICAgdGhpcy5saW5rSGFuZGxlci5yZWdpc3Rlcih0aGlzKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAoIXRoaXMubGlua0hhbmRsZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5saW5rSGFuZGxlci51bnJlZ2lzdGVyKHRoaXMpO1xuICB9XG5cbiAgZ2V0IGVsZW1lbnQoKTogRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIGdldCB1cmxUcmVlKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMucmwudXJsVHJlZTtcbiAgfVxufVxuIl19